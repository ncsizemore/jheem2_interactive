name: Deploy to shinyapps.io

on:
  push:
    tags:
      - 'deploy-*'  # Triggers on any tag starting with "deploy-"
  workflow_dispatch:  # Allows manual triggering from GitHub UI
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main'
        type: 'string'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RSCONNECT_USER: ${{ secrets.RSCONNECT_USER }}
      RSCONNECT_TOKEN: ${{ secrets.RSCONNECT_TOKEN }}
      RSCONNECT_SECRET: ${{ secrets.RSCONNECT_SECRET }}
    
    steps:
      - name: Determine branch to deploy
        id: determine_branch
        run: |
          # If triggered by workflow_dispatch, use the input branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH="${{ github.event.inputs.branch }}"
            echo "Using branch from workflow dispatch: $BRANCH"
          else
            # For tag-based triggers, extract branch from ref using patterns
            # Extract branch from tag if it has format deploy-{branch}-v{version}
            TAG=${GITHUB_REF#refs/tags/}
            if [[ "$TAG" =~ ^deploy-([^-]+)-v ]]; then
              BRANCH="${BASH_REMATCH[1]}"
              echo "Extracted branch from tag: $BRANCH"
            else
              # Default to main if can't determine branch from tag
              BRANCH="main"
              echo "Using default branch: $BRANCH"
            fi
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Set deployment parameters
        id: params
        run: |
          BRANCH="${{ steps.determine_branch.outputs.branch }}"
          echo "Configuring deployment for branch: $BRANCH"
          
          # Set app name and other parameters based on branch
          if [ "$BRANCH" = "ryan-white" ]; then
            echo "APP_NAME=ryan-white" >> $GITHUB_ENV
            echo "MODEL_TYPE=ryan-white" >> $GITHUB_ENV
            echo "SIMULATION_PATH=simulations/ryan-white" >> $GITHUB_ENV
          elif [ "$BRANCH" = "ehe" ]; then
            echo "APP_NAME=ehe" >> $GITHUB_ENV
            echo "MODEL_TYPE=ehe" >> $GITHUB_ENV
            echo "SIMULATION_PATH=simulations/ehe" >> $GITHUB_ENV
          else
            # Default for main branch or any other branch
            echo "APP_NAME=jheem-dev" >> $GITHUB_ENV
            echo "MODEL_TYPE=ryan-white" >> $GITHUB_ENV
            echo "SIMULATION_PATH=simulations/ryan-white" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Checkout jheem2_interactive
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.determine_branch.outputs.branch }}
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Create jheem_analyses directory
        run: mkdir -p jheem_analyses_deploy
      
      - name: Checkout jheem_analyses_deploy
        uses: actions/checkout@v3
        with:
          repository: ncsizemore/jheem_analyses_deploy
          path: jheem_analyses_deploy
          token: ${{ secrets.GH_PAT }}
          lfs: true
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.2'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev \
            libgdal-dev \
            libgeos-dev \
            libproj-dev \
            libsqlite3-dev \
            libudunits2-dev
      
      - name: Install R dependencies
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Install all required packages from CRAN
          install.packages(c(
            "brio", "bslib", "cachem", "callr", "checkmate", "cli", "colorspace", "commonmark", 
            "cpp11", "crayon", "data.table", "desc", "diffobj", "digest", "dplyr", "ellipsis", 
            "evaluate", "fansi", "farver", "fastmap", "fontawesome", "fs", "generics", "ggplot2", 
            "glue", "gridtext", "gtable", "htmltools", "httpuv", "isoband", "jquerylib", "jsonlite", 
            "labeling", "latex2exp", "later", "lifecycle", "magrittr", "markdown", "memoise", "mime", 
            "munsell", "pillar", "pkgconfig", "pkgload", "plotly", "png", "praise", "processx", 
            "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "reactable", "reactablefmtr", "reactR", 
            "rematch2", "remotes", "rlang", "rprojroot", "rsconnect", "rstudioapi", "sass", "scales", 
            "shiny", "shinydashboard", "sourcetools", "stringi", "stringr", "tibble", "tidyr", "tidyselect", 
            "tweenr", "utf8", "vctrs", "viridisLite", "waldo", "withr", "xtable", "yaml", 
            "abind", "htmlwidgets", "reshape2", "base64enc", "lazyeval", "crosstalk", "viridis", "plyr", 
            "RColorBrewer", "hms", "gridBase", "ggfittext", "ggbeeswarm", "polyclip", "vipor", "beeswarm", 
            "gggenes", "ggsignif", "shinycssloaders", "DT", "colourpicker", "lubridate", "shinyjs", "assertr", 
            "patchwork", "sf", "pbapply", "classInt", "DBI", "KernSmooth", "units", "e1071", "wk", 
            "s2", "proxy", "waiter", "httr", "curl", "openssl",
            # Additional dependencies from deployment_dependencies.R and logs
            "httr2", "ggmap", "ggnewscale", "deSolve", "blastula", "aws.s3", "shinyBS"
          ))
          
          # Install CRAN packages from deployment_dependencies.R
          # Already installed deSolve above
          
          # Install GitHub packages with authentication in the correct order
          remotes::install_github("tfojo1/locations", auth_token = Sys.getenv("GITHUB_PAT"), force = TRUE)
          remotes::install_github("tfojo1/distributions", auth_token = Sys.getenv("GITHUB_PAT"), force = TRUE)
          remotes::install_github("tfojo1/bayesian.simulations", auth_token = Sys.getenv("GITHUB_PAT"), force = TRUE)
          # Don't install jheem2 here - we'll use a special deployment branch
        shell: Rscript {0}
      
      - name: Create Makevars template
        run: |
          echo "# src/Makevars" > makevars_template
          echo "CFLAGS = -O0" >> makevars_template
          echo "CXXFLAGS = -O0" >> makevars_template
          echo "PKG_CXXFLAGS = -I\${R_HOME}/include" >> makevars_template
          echo "PKG_LIBS = -L\${R_HOME}/lib -lR \${LAPACK_LIBS} \${BLAS_LIBS} \${FLIBS}" >> makevars_template
      
      - name: Prepare jheem2 deployment branch
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Define variables
          SOURCE_BRANCH="dev"
          DEPLOYMENT_BRANCH="ryan-white-deployment"
          TEMP_DIR="/tmp/jheem2_deploy"
          
          echo "=== Preparing jheem2 deployment branch ==="
          
          # Check if we need to update the deployment branch
          echo "Checking for changes in dev branch..."
          CURRENT_DEV_SHA=$(git ls-remote https://github.com/tfojo1/jheem2.git ${SOURCE_BRANCH} | cut -f1)
          echo "Current dev SHA: ${CURRENT_DEV_SHA}"
          
          echo "Changes detected in dev branch, updating deployment branch..."
          
          # Create a temporary directory for cloning the repo
          rm -rf "$TEMP_DIR"
          mkdir -p "$TEMP_DIR"
          
          # Clone the repository to the temp directory
          git clone https://x-access-token:${GITHUB_PAT}@github.com/tfojo1/jheem2.git "$TEMP_DIR"
          cd "$TEMP_DIR"
          
          # Checkout source branch and pull latest
          git checkout "$SOURCE_BRANCH"
          git pull origin "$SOURCE_BRANCH"
          
          # Create new deployment branch
          git checkout -b "$DEPLOYMENT_BRANCH"
          
          # Make deployment-specific modifications
          # 1. Remove .o files
          find . -name '*.o' -type f -delete
          
          # 2. Copy the Makevars file from template
          cp $GITHUB_WORKSPACE/makevars_template src/Makevars
          
          # Commit and push changes
          git add -A
          git commit -m "Prepare ${DEPLOYMENT_BRANCH} from ${SOURCE_BRANCH} branch"
          git push -f origin "$DEPLOYMENT_BRANCH"
          
          # Return to original directory
          cd "$GITHUB_WORKSPACE"
          
          echo "Deployment branch created/updated successfully!"
        shell: bash

      - name: Install jheem2 from deployment branch
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Install from deployment branch
          remotes::install_github("tfojo1/jheem2@ryan-white-deployment", auth_token = Sys.getenv("GITHUB_PAT"), force = TRUE)
        shell: Rscript {0}
      
      - name: Setup shinyapps.io connection
        run: |
          rsconnect::setAccountInfo(
            name="${{ secrets.RSCONNECT_USER }}",
            token="${{ secrets.RSCONNECT_TOKEN }}",
            secret="${{ secrets.RSCONNECT_SECRET }}"
          )
        shell: Rscript {0}
      
      - name: Run simplified deployment script
        run: |
          # Export environment variable to tell the script where to find the jheem_analyses repository
          export JHEEM_ANALYSES_PATH="./jheem_analyses_deploy"
          export SIMULATION_PATH="${{ env.SIMULATION_PATH }}"
          Rscript deployment/simplified_deploy.R
        timeout-minutes: 30
      
      - name: Deploy to shinyapps.io
        run: |
          # Use the dynamic app name based on branch
          rsconnect::deployApp(
            appDir = ".",
            appName = "${{ env.APP_NAME }}",
            account = "${{ secrets.RSCONNECT_USER }}",
            appFiles = c(
              "app.R",
              ".Renviron",
              "deployment/deployment_dependencies.R",
              list.files("src", recursive = TRUE, full.names = TRUE),
              list.files("www", recursive = TRUE, full.names = TRUE),
              list.files("external/jheem_analyses", recursive = TRUE, full.names = TRUE),
              list.files("${{ env.SIMULATION_PATH }}/prerun", recursive = TRUE, full.names = TRUE),
              "${{ env.SIMULATION_PATH }}/base/C.12580_base.Rdata"
            ),
            forceUpdate = TRUE,
            lint = FALSE
          )
        shell: Rscript {0}
